package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"time"

	graphql_api "github.com/DmitryLogunov/trading-platform/core/graphql-api"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input graphql_api.NewPost) (*graphql_api.Post, error) {
	addedPost := graphql_api.Post{
		Title:       input.Title,
		Content:     input.Content,
		Author:      input.Author,
		Hero:        input.Hero,
		PublishedAt: time.Now(),
		UpdatedAt:   time.Now(),
	}

	if err := r.Database.Create(&addedPost).Error; err != nil {
		fmt.Println(err)
		return nil, err

	}

	return &addedPost, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graphql_api.NewUser) (*graphql_api.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Mutation returns graphql_api.MutationResolver implementation.
func (r *Resolver) Mutation() graphql_api.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
