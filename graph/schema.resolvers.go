package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"time"

	"github.com/DmitryLogunov/golang-graphql/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	addedPost := model.Post{
		Title:       input.Title,
		Content:     input.Content,
		Author:      input.Author,
		Hero:        input.Hero,
		PublishedAt: time.Now(),
		UpdatedAt:   time.Now(),
	}

	if err := r.Database.Create(&addedPost).Error; err != nil {
		fmt.Println(err)
		return nil, err

	}

	return &addedPost, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post

	GetPosts := r.Database.Model(&posts).Find(&posts)

	if GetPosts.Error != nil {
		fmt.Println(GetPosts.Error)
		return nil, GetPosts.Error
	}
	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
