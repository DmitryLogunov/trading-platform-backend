package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	graphql_api "github.com/DmitryLogunov/trading-platform/internal/api/graphql-api"
	"github.com/DmitryLogunov/trading-platform/internal/core/scheduler"
	cronPeriodUnits "github.com/DmitryLogunov/trading-platform/internal/core/scheduler/enums/cron-period-units"
	mongodbModels "github.com/DmitryLogunov/trading-platform/internal/database/mongodb/models"
	"log"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input graphql_api.NewPost) (*graphql_api.Post, error) {
	postsModel := mongodbModels.Post{
		Title:   input.Title,
		Content: input.Content,
		Author:  input.Author,
		Hero:    input.Hero,
	}

	addedPost, err := postsModel.CreatePost(ctx, &postsModel, r.MongoDB)

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &graphql_api.Post{
		ID:          addedPost.ID.Hex(),
		Title:       addedPost.Title,
		Content:     addedPost.Content,
		Author:      addedPost.Author,
		Hero:        addedPost.Hero,
		PublishedAt: addedPost.PublishedAt,
		UpdatedAt:   addedPost.UpdatedAt,
	}, nil
}

// StartJob is the resolver for the startJob field.
func (r *mutationResolver) StartJob(ctx context.Context, input graphql_api.JobData) (string, error) {
	handler := func(interface{}) bool {
		log.Printf("Job processing: %s", input.HandlerTag)
		return true
	}

	var cronPeriodUnit uint
	if input.CronPeriod.Unit == "seconds" {
		cronPeriodUnit = cronPeriodUnits.Seconds
	}

	if input.CronPeriod.Unit == "minutes" {
		cronPeriodUnit = cronPeriodUnits.Minutes
	}

	if input.CronPeriod.Unit == "hours" {
		cronPeriodUnit = cronPeriodUnits.Hours
	}

	return r.Scheduler.AddJob(
		input.HandlerTag,
		handler,
		input.Params,
		scheduler.CronPeriod{Unit: cronPeriodUnit, Interval: input.CronPeriod.Interval},
	), nil
}

// StopJob is the resolver for the stopJob field.
func (r *mutationResolver) StopJob(ctx context.Context, tag string) (string, error) {
	if res, err := r.Scheduler.DeleteJob(tag); res == false || err != nil {
		return fmt.Sprintf("%s", err), err
	}

	return "OK", nil
}

// Mutation returns graphql_api.MutationResolver implementation.
func (r *Resolver) Mutation() graphql_api.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
