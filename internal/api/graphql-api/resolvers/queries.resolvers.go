package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	graphql_api2 "github.com/DmitryLogunov/trading-platform/internal/api/graphql-api"
	"github.com/DmitryLogunov/trading-platform/internal/database/mysql/models"
)

// GetPosts is the resolver for the getting posts.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*graphql_api2.Post, error) {
	pm := models.Post{}
	posts, err := pm.GetPosts(r.Database)

	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	var gqlPosts []*graphql_api2.Post

	for _, p := range posts {
		gqlPosts = append(gqlPosts, &graphql_api2.Post{
			Title:       p.Title,
			Content:     p.Content,
			Author:      p.Author,
			Hero:        p.Hero,
			PublishedAt: p.PublishedAt,
			UpdatedAt:   p.UpdatedAt,
		})
	}

	return gqlPosts, nil
}

// GetUsers is the resolver for the getting users.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*graphql_api2.User, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}

// Query returns graphql_api2.QueryResolver implementation.
func (r *Resolver) Query() graphql_api2.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
