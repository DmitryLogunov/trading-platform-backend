package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	graphqlApi "github.com/DmitryLogunov/trading-platform-backend/internal/app/graphql-api"
)

// CreateTrading is the resolver for the createTrading field.
func (r *mutationResolver) CreateTrading(ctx context.Context, input graphqlApi.NewTradingInput) (*graphqlApi.Trading, error) {
	return r.GqlServices.TradingService.CreateTrading(ctx, r.MongoDB, input)
}

// UpdateTrading is the resolver for the updateTrading field.
func (r *mutationResolver) UpdateTrading(ctx context.Context, input graphqlApi.UpdateTradingInput) (*graphqlApi.Trading, error) {
	return r.GqlServices.TradingService.UpdateTrading(ctx, r.MongoDB, input)
}

// DeleteTrading is the resolver for the deleteTrading field.
func (r *mutationResolver) DeleteTrading(ctx context.Context, id string) (string, error) {
	if res, err := r.GqlServices.TradingService.DeleteTrading(ctx, r.MongoDB, id); !res && err != nil {
		return fmt.Sprintf("ERROR: %s", err), err
	}

	return "OK", nil
}

// StartJob is the resolver for the startJob field.
func (r *mutationResolver) StartJob(ctx context.Context, input graphqlApi.JobData) (string, error) {
	return r.GqlServices.JobsService.StartJob(r.Scheduler, input)
}

// StopJob is the resolver for the stopJob field.
func (r *mutationResolver) StopJob(ctx context.Context, tag string) (string, error) {
	return r.GqlServices.JobsService.StopJob(r.Scheduler, tag)
}

// Mutation returns graphqlApi.MutationResolver implementation.
func (r *Resolver) Mutation() graphqlApi.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
